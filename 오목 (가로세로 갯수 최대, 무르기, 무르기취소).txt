#include <iostream>
#include <fstream>
#include <Windows.h>

using namespace std;
struct Omok{
	int x, y;
	char* dol;
};

char* board[20][20];
Omok back[400], cancel[400];	// 무르기, 무르기 취소
int topB = -1, topC = -1;

void make();
void show(int, int);
void count();
void push(Omok&, int, int, char*);
void pop();

int main()
{
	ofstream fileOut;
	ifstream fileIn;
	int x, y;	// 놓을 좌표값
	int W = 0, B = 0, cnt = 0;	// 전체 돌 갯수, 몇 번째 턴인지
	int op = 0;
	make();
	while (1)
	{
		system("cls");
		show(W, B);
		count();
		cout << "1. 돌 놓기 2. 무르기 3. 무르기 취소\n";
		cin >> op;
		switch (op)
		{
		case 1:
			printf("x, y를 입력해 주세요.");
			scanf_s("%d %d", &x, &y);
			if (x > 20 || y > 20 || board[x - 1][y - 1] == "○" || board[x - 1][y - 1] == "●"){
				continue;
			}
			else if (x > 0 && y > 0 && topB < 400) {
				if (cnt % 2 == 0){
					board[x - 1][y - 1] = "○";
					++B;
				}
				else{
					board[x - 1][y - 1] = "●";
					++W;
				}
				++cnt, ++topB;
				push(back[topB], x, y, board[x - 1][y - 1]);
			}
			break;
		case 2:
			if (topC < 400 && topB >= 0){
				push(cancel[++topC], back[topB].x, back[topB].y, back[topB].dol);
				if (board[back[topB].x - 1][back[topB].y - 1] == "○")
					--B;
				else if (board[back[topB].x - 1][back[topB].y - 1] == "●")
					--W;
				pop();
				--cnt;
			}
			break;
		case 3:
			if (topC >= 0){
				board[cancel[topC].x - 1][cancel[topC].y - 1] = cancel[topC].dol;
				if (++cnt % 2 == 0)
					++W; 
				else
					++B;
				--topC;
			}
			break;
		case 4:
			fileIn.open("소스.cpp", ios::in);
			fileOut.open("load.txt", ios::out);
			
			fileIn.close();
			fileOut.close();
			break;
		default:
			break;
		}
	}
}

void make(){
	for (int i = 0; i < 20; ++i){
		for (int j = 0; j < 20; ++j){
			if (i == 0)
				board[i][j] = "┬";
			else if (i == 19)
				board[i][j] = "┴";
			else if (j == 0)
				board[i][j] = "├";
			else if (j == 19)
				board[i][j] = "┤";
			else
				board[i][j] = "┼";
		}
	}
	board[0][0] = "┌", board[0][19] = "┐", board[19][0] = "└", board[19][19] = "┘";
}
void show(int w, int b){
	for (int i = 0; i < 20; ++i){
		for (int j = 0; j < 20; ++j){
			cout << board[i][j];
		}
		cout << endl;
	}
	cout << "흰돌의 갯수: " << w << endl;
	cout << "검은돌의 갯수: " << b << endl;
}
void count(){
	int i = 0, j = 0, n = 0, k = 19, cntB = 0, cntW = 0;
	int wMaxW[20], wMaxB[20], hMaxW[20], hMaxB[20], dMaxB[39], dMaxW[39];
	int White = 0, Black = 0;
	int wWhite[20], wBlack[20], hWhite[20], hBlack[20];

	for (i = 0; i < 20; ++i){// 가로 검색 및 출력
		for (j = 0; j < 20; ++j){
			if (board[i][j] == "○")
				++Black, ++cntB;
			else{
				if (wMaxB[i] < cntB)
					wMaxB[i] = cntB;
				else if (wMaxB[i] == 0 && Black>0)
					wMaxB[i] = 1;
				cntB = 0;
			}
			if (board[i][j] == "●")
				++White, ++cntW;
			else{
				if (wMaxW[i] < cntW)
					wMaxW[i] = cntW;
				else if (wMaxW[i] == 0 && White>0)
					wMaxW[i] = 1;
				cntW = 0;
			}
		}
		hWhite[i] = White, hBlack[i] = Black;
		Black = 0, White = 0, cntB = 0, cntW = 0;
	}

	for (i = 0; i < 20; ++i)// 가로줄 돌 갯수
		cout << " " << hBlack[i];
	cout << " B 가로" << endl;
	for (i = 0; i < 20; ++i)
		cout << " " << hWhite[i];
	cout << " W 가로" << endl;

	for (i = 0; i < 20; ++i){
		if (wMaxB[i] < wMaxW[i])
			cout << i+1 << ".●" << wMaxW[i];
		else if (wMaxB[i] > wMaxW[i])
			cout << i + 1 << ".○" << wMaxB[i];
		else
			cout << i + 1 << ".●" << wMaxW[i] << "○" << wMaxB[i] << " ";
	}
	printf("\n\n");
	for (j = 0; j < 20; ++j){// 세로 검색
		for (i = 0; i < 20; ++i){
			if (board[i][j] == "○")
				++Black, ++cntB;
			else{
				if (hMaxB[j] < cntB)
					hMaxB[j] = cntB;
				else if (hMaxB[j] == 0 && Black>0)
					hMaxB[j] = 1;
				cntB = 0;
			}
			if (board[i][j] == "●")
				++White, ++cntW;
			else{
				if (hMaxW[j] < cntW)
					hMaxW[j] = cntW;
				else if (hMaxW[j] == 0 && White>0)
					hMaxW[j] = 1;
				cntW = 0;
			}
		}
		wWhite[j] = White, wBlack[j] = Black;
		Black = 0, White = 0, cntB = 0, cntW = 0;
	}

	for (i = 0; i < 20; ++i)// 세로줄 돌 갯수
		cout << " " << hBlack[i];
	cout << " B 세로" << endl;
	for (i = 0; i < 20; ++i)
		cout << " " << hWhite[i];
	cout << " W 세로" << endl;

	for (i = 0; i < 20; ++i){
		if (hMaxB[i] < hMaxW[i])
			cout << i + 1 << ".●" << hMaxW[i];
		else if (hMaxB[i] > hMaxW[i])
			cout << i + 1 << ".○" << hMaxB[i];
		else
			cout << i + 1 << ".●" << hMaxW[i] << "○" << hMaxB[i] << " ";
	}
	printf("\n\n");
	i = 0, j = k;
	while (i < 20){// 위쪽↘
		i = 0, j = k;
		while (j < 20){
			if (board[i][j] == "○"){
				++cntB;
				if (dMaxB[n] < cntB)
					dMaxB[n] = cntB;
			}
			else{
				if (dMaxB[n] == 0 && Black > 0)
					dMaxB[n] = 1;
				else if (dMaxB[n] <= 0 && cntB == 0)
					dMaxB[n] = 0;
				cntB = 0;
			}
			if (board[i][j] == "●"){
				++cntW;
				if (dMaxW[n] < cntW)
					dMaxW[n] = cntW;
			}
			else{
				if (dMaxW[n] == 0 && White > 0)
					dMaxW[n] = 1;
				else if (dMaxW[n] <= 0 && cntW == 0)
					dMaxW[n] = 0;
				cntW = 0;
			}
			++i, ++j;
		}
		--k, ++n;
	}
	//k = 19, ++n;
	//while (i > 2){// 아래쪽↘
	//	i = k, j = 0;
	//	while (j < 20-k){
	//		if (board[i][j] == "○"){
	//			++cntB;
	//			if (dMaxB[n] < cntB)
	//				dMaxB[n] = cntB;
	//		}
	//		else{
	//			if (dMaxB[n] == 0 && Black > 0)
	//				dMaxB[n] = 1;
	//			else if (dMaxB[n] == 0 && cntB == 0)
	//				dMaxB[n] = 0;
	//			cntB = 0;
	//		}
	//		if (board[i][j] == "●"){
	//			++cntW;
	//			if (dMaxW[n] < cntW)
	//				dMaxW[n] = cntW;
	//		}
	//		else{
	//			if (dMaxW[n] == 0 && White > 0)
	//				dMaxW[n] = 1;
	//			else if (dMaxW[n] == 0 && cntW == 0)
	//				dMaxW[n] = 0;
	//			cntW = 0;
	//		}
	//		++i, ++j;
	//	}
	//	--k, ++n;
	//}
	for (i = 0; i < n; ++i){
		if (dMaxB[i] < dMaxW[i])
			cout << i + 1 << ".●" << dMaxW[i];
		else if (dMaxB[i] > dMaxW[i])
			cout << i + 1 << ".○" << dMaxB[i];
		else
			cout << i + 1 << ".●" << dMaxW[i] << "○" << dMaxB[i] << " ";
	}
	cout << endl;
}
void push(Omok& o, int x, int y, char* d){
		o.x = x;
		o.y = y;
		o.dol = new char[sizeof(d)+1];
		strcpy_s(o.dol, sizeof(d)+1, d);
}
void pop(){

	if (back[topB].x - 1 == 0)
		board[back[topB].x - 1][back[topB].y - 1] = "┬";
	else if (back[topB].x - 1 == 19)
		board[back[topB].x - 1][back[topB].y - 1] = "┴";
	else if (back[topB].y - 1 == 0)
		board[back[topB].x - 1][back[topB].y - 1] = "├";
	else if (back[topB].y - 1 == 19)
		board[back[topB].x - 1][back[topB].y - 1] = "┤";
	else
		board[back[topB].x - 1][back[topB].y - 1] = "┼";

	if (back[topB].x - 1 == 0 && back[topB].y - 1 == 0)
		board[back[topB].x - 1][back[topB].y - 1] = "┌";
	if (back[topB].x - 1 == 0 && back[topB].y - 1 == 19)
		board[back[topB].x - 1][back[topB].y - 1] = "┐";
	if (back[topB].x - 1 == 19 && back[topB].y - 1 == 0)
		board[back[topB].x - 1][back[topB].y - 1] = "└";
	if (back[topB].x - 1 == 19 && back[topB].y - 1 == 19)
		board[back[topB].x - 1][back[topB].y - 1] = "┘";

	--topB;
}